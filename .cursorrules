# clinerules

## 重要

ユーザーは日本人なので、常に日本語でやり取りします。
2 回以上連続でテストを失敗した時は、現在の状況を整理して、ユーザーと一緒に解決方法を考えます。
PLAN MODE の場合は、ファイルへの書き込みや環境を破壊するようなコマンドは絶対に実行しません。
.clinerulesの追記をした方が良いと感じるときは、ユーザーに相談の上実施して良いです。
MCPサーバーを積極的に利用してください。

## コーディング規約

- deps.tsは使用しない。
- 特別な指示がない限り、`default export`は使用しない。
- `export { func }` より `export function func() {}` を使用する。
- ifのネストはできる限り避ける。
- エラーが出ていない場合はfunctionの構文を優先するが、Linterがアロー関数を要求する場合はアロー関数を使用する。
- コメントは日本語で書く。

## 作業の進め方

1. タスクについて理解を深め、方針をユーザーに返答します。
2. ブランチを作成するべきかをユーザーに確認します。
3. `git` の状態を確認し、コミットされていない変更があれば、ユーザーにどうするかを聞きます。
4. そのタスクに取り掛かるための新しいブランチを作成します。必ず現在作業中のブランチから作成します。
5. 作業を進め、タスクが進むたびにコミットします。コミットメッセージは適宜作成します。これについては[コミットメッセージ]の項を参照します。3.で作成したブランチ内の変更であれば、ユーザーに確認を取る必要はありません。提示されたタスクが完了するまで、これを繰り返します。
6. タスクの最後にフォーマットするコマンドを実行します。
7. ユーザーにタスクが完了したことを報告し、元のブランチへのマージの許可を求めます。許可が出たらマージします。

## 作業時の注意

- `gh run list`のような外部サービスを参照しているとき、連続した実行はせず 10 秒ほど空けて再実行してください。
- コードの変更を行う場合は、適宜TypeScriptやBiomeのエラーがないか確認しながら進めてください。
- エラーが発生した場合は、エラーメッセージを確認して、問題を解決してから次のステップに進んでください。

## よく使うコマンド

### 開発コマンド
- `npm run dev`: 開発サーバーを起動します。
- `npm run dev:validate`: 開発サーバーと型チェックを同時に実行します。変更を監視し、型エラーをリアルタイムで確認できます。
- `npm run deploy-commands`: スラッシュコマンドをDiscordに登録します。

### 検証コマンド
- `npm run type-check`: TypeScriptの型チェックを実行します（コンパイルなし）。
- `npm run lint`: Biomeでリントエラーを確認します。
- `npm run check`: Biomeでリントとフォーマットのエラーを確認して修正します。
- `npm run format`: Biomeでフォーマットのみを実行します。
- `npm run validate`: 型チェック、Biomeチェック、テストをすべて実行します。コードの品質を総合的に確認できます。

### ビルドとテスト
- `npm run build`: TypeScriptのコンパイルを実行します。
- `npm run test`: Jestでテストを実行します。
- `npm run test:watch`: テストを監視モードで実行します。
- `npm start`: 本番環境でボットを起動します（ビルド後）。

### 開発の流れ
1. コードを変更したら `npm run type-check` を実行してTypeScriptエラーがないか確認します。
2. `npm run check` を実行してBiomeのエラーを修正します。
3. 機能が完成したら `npm run test` でテストを実行します。
4. 問題がなければ `npm run validate` で総合的な検証を行います。
5. コミットする前に必ず検証を行い、エラーがないことを確認します。

## プロジェクト

### Discord Bot (discord.js)

- **技術スタック**
  - Node.js
  - TypeScript
  - discord.js
  - @discordjs/voice
  - Jest (テストフレームワーク)
  - Biome (コードフォーマッター)

- **プロジェクト構造**
  ```
  /
  ├── .env.example    # 環境変数の例
  ├── .env           # 環境変数
  ├── .gitignore     # Gitの除外設定
  ├── package.json   # 依存関係とスクリプト
  ├── tsconfig.json  # TypeScript設定
  ├── biome.json     # Biome設定
  ├── src/
  │   ├── index.ts   # メインエントリーポイント
  │   ├── deploy-commands.ts  # スラッシュコマンドのデプロイ
  │   ├── commands/  # コマンドの実装
  │   └── events/    # イベントハンドラ
  ├── dist/          # ビルド成果物
  └── README.md      # プロジェクトの説明
  ```

- **開発手順**
  1. `.env.example`をコピーして`.env`を作成
  2. Discord Developer Portalでbotを作成し、トークンを取得
  3. `.env`にトークンを設定
  4. `npm install`で依存関係をインストール
  5. `npm run dev`で開発サーバー起動

- **主なスクリプト**
  - `npm run dev`: 開発サーバー起動
  - `npm run test`: テスト実行
  - `npm run deploy-commands`: スラッシュコマンドのデプロイ
  - `npm run check`: コードフォーマットチェック
  - `npm run build`: TypeScriptのビルド
  - `npm start`: 本番環境での起動

## メモリ管理
- タスクを始める前に「/r」で保存されたメモリを読み込む
- 知識は「memory」として参照する
- タスクが完了したら：
  1. エンティティの作成/更新
  2. 関係性の定義
  3. 観察結果の保存
